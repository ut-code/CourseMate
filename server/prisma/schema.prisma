//schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Day {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
  other
}

model User {
  // identifiers
  id   Int    @id @default(autoincrement())
  guid String @unique

  // profile
  name       String
  gender     String
  grade      String
  faculty    String
  department String
  intro      String
  pictureUrl String

  // bindings to other parts of this app
  enrollments    Enrollment[]
  sendingUsers   Relationship[] @relation("sending") // 自分がマッチリクエストを送ったユーザー
  receivingUsers Relationship[] @relation("receiving") // 自分にマッチリクエストを送ったユーザー
}

// プロフィールの画像。
model Avatar {
  guid String @id
  data Bytes
}

// enum Gender {
//   MALE
//   FEMALE
//   OTHER
//   SECRET
// }

model Course {
  id          String       @id
  name        String
  teacher     String
  enrollments Enrollment[]
  slots       Slot[]
}

// コマ。1つの講義に対して複数存在しうる。
model Slot {
  id       Int    @id @default(autoincrement())
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  period   Int // 1-6. 0 の場合はなし (集中など)
  day      Day // 曜日。other の場合は集中など

  @@unique([courseId, period, day])
}

model Enrollment {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
}

model Relationship {
  id              Int            @id @default(autoincrement())
  status          MatchingStatus
  sendingUser     User           @relation("sending", fields: [sendingUserId], references: [id], onDelete: Cascade)
  sendingUserId   Int
  receivingUser   User           @relation("receiving", fields: [receivingUserId], references: [id], onDelete: Cascade)
  receivingUserId Int

  messages Message[]

  @@unique([sendingUserId, receivingUserId])
}

enum MatchingStatus {
  PENDING
  MATCHED
  REJECTED
}

// TODO: lazy load MessageLog s.t. it doesn't need to be loaded on Overview query.
// https://www.prisma.io/docs/orm/prisma-client/queries/select-fields
model SharedRoom {
  id        Int       @id @default(autoincrement())
  thumbnail String // URL to thumbnail picture
  name      String
  members   Int[]
  messages  Message[]
}

model Message {
  id           Int           @id @default(autoincrement())
  creator      Int // refers to UserId
  createdAt    DateTime      @default(now()) // @readonly
  edited       Boolean       @default(false)
  content      String
  relation     Relationship? @relation(fields: [relationId], references: [id], onDelete: Cascade)
  relationId   Int?
  sharedRoom   SharedRoom?   @relation(fields: [sharedRoomId], references: [id], onDelete: Cascade)
  sharedRoomId Int?
}
