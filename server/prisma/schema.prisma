generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  guid           String         @unique
  name           String
  gender         String
  grade          String
  faculty        String
  department     String
  intro          String
  pictureUrl     String
  enrollments    Enrollment[]
  interests      Interest[]
  receivingUsers Relationship[] @relation("receiving")
  sendingUsers   Relationship[] @relation("sending")
}

model Avatar {
  guid String @id
  data Bytes
}

model Picture {
  hash String @id
  data Bytes
  key  String
}

model InterestSubject {
  id       Int        @id @default(autoincrement())
  name     String
  group    String
  Interest Interest[]

  @@unique([name, group])
}

model Interest {
  userId    Int
  subjectId Int
  subject   InterestSubject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id])

  @@unique([userId, subjectId])
}

model Course {
  id          String       @id
  name        String
  teacher     String
  enrollments Enrollment[]
  slots       Slot[]
}

model Slot {
  id       Int    @id @default(autoincrement())
  courseId String
  period   Int
  day      Day
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([courseId, period, day])
}

model Enrollment {
  id       Int    @id @default(autoincrement())
  userId   Int
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Relationship {
  id              Int            @id @default(autoincrement())
  status          MatchingStatus
  sendingUserId   Int
  receivingUserId Int
  messages        Message[]
  receivingUser   User           @relation("receiving", fields: [receivingUserId], references: [id], onDelete: Cascade)
  sendingUser     User           @relation("sending", fields: [sendingUserId], references: [id], onDelete: Cascade)

  @@unique([sendingUserId, receivingUserId])
}

model SharedRoom {
  id        Int       @id @default(autoincrement())
  thumbnail String
  name      String
  members   Int[]
  messages  Message[]
}

model Message {
  id           Int           @id @default(autoincrement())
  creator      Int
  createdAt    DateTime      @default(now())
  edited       Boolean       @default(false)
  content      String
  isPicture    Boolean
  read         Boolean       @default(false)
  relationId   Int?
  sharedRoomId Int?
  relation     Relationship? @relation(fields: [relationId], references: [id], onDelete: Cascade)
  sharedRoom   SharedRoom?   @relation(fields: [sharedRoomId], references: [id], onDelete: Cascade)
}

enum Day {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
  other
}

enum MatchingStatus {
  PENDING
  MATCHED
  REJECTED
}
